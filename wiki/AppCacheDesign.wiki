#summary Design of a Redirect Linker to support the Application Cache feature
#labels Phase-Design,API-AppCache

= Introduction =
== Context ==
The [http://www.w3.org/TR/html5/offline.html Application Cache feature] describes a cache manifest resource which describes all resources which are accessed by the web application. Some of these resources are _static_, and others are _dynamic_ (meaning, a network RPC-kind of resource).

The browser (at least, iPhone Safari) loads the cache-manifest and immediately obtains all resources in the manifest. The manifest is from this point regarded as a proxy to the actual *internet* (not just the originating web server), so if the app tries to load a resource _not_ listed in the manifest, it is rewarded a `404 NOT_FOUND` and the resource is not loaded.

== Problems ==
Here we found several problems we can't solve with the current status quo:
  # The cache-manifest must be set in the `<html>` tag of the `index.html` page in order to be effective. This means the manifest must list *all permutation resources* generated by GWT, obviously resulting in a *large network overhead* in initial loading time;
  # If the cache-manifest must be permutation-specific (to narrow down the pointless network overhead) the browser *should get to a page representing a particular permutation*;
  # If the user is redirected to a different page, the user *should be able to bookmark the page* for later reference (and effective offline access);
  # Not just the cacheable resources, *all other resources must be listed in the manifest*. This means the !AppCache library must be provided some means to *detect a new version of the webapp*, so it can update its cache.

= Proposed solution =
During compilation, GWT should take care of the following:
  # Create a copy of the landing page (`index.html`) for each permutation. Amend the copy with `<script>` tags containing the output from the GWT compiler for that particular permutation, and a `manifest` attribute in the `<html>` tag which points to the cache-manifest specific for this permutation;
  # Create a new `index.html` landing page which determines which permutation to load, and then redirects the browser to the right `permutation.html` page. This page must be bookmarkable, so the name of the resource is likely `index-safari-en.html` rather than `3ADB5A7DFBAC87E6D3FD560FA7EC9A85.index.html`. Also, the code to target a specific Permutation should also be used on the permutation-specific pages which is useful if the end-page is shared with somebody else.

= !RedirectLinker =
In order to perform these actions we need a new Linker, which we'll call the `RedirectLinker`. Its goals are:
  # Find the primary 'landing page' (either the module's HTML file or the first `*.htm(l)` entry in the `welcome-file-list` in the `web.xml` file);
  # Create a copy of this `index.html` file for each permutation:
    * each copy will get a name reflecting the actual permutation (like `index-safari-en.html` reflecting the Safari permutation using English locale);
    * add a `manifest` attribute to its `<html>` tag pointing to a cache-manifest specific for its Permutation;
    * add a `<script>` tag containing the compiled Javascript code specific for its Permutation;
  # Replace the `index.html` landing page with a new resource, which just includes the Javscript to discern the permutation (and perform a redirect);
  # Create the `module.nocache.js` resource which discerns the appropriate Permutation to use, and redirects the browser to the Permutation-page created at (2);
  # Create a cache-manifest resource for each permutation. If a template is provided already containing some entries, use that as a template for each Permutation (the template enables the developer to add additional entries not known by the compiler);
  # Collect the `NetworkArtifact` instances generated by the `ApplicationCacheNetworkSectionGenerator` and translate them to entries in the NETWORK section of all cache-manifests resources;
  # Collect the static resources emitted from GWT and store these as entries in the appropriate cache-manifest resources.